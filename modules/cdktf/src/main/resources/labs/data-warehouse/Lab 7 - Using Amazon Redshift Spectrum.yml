AWSTemplateFormatVersion: 2010-09-09
Description: Data Warehousing on AWS - Lab 7 - Using Amazon Redshift Spectrum

Parameters:
  LinuxAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  ResetLakeFormation:
    Type: Custom::ResetLakeFormation
    Properties:
      ServiceToken: !GetAtt ResetLakeFormationFunction.Arn

  ResetLakeFormationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ResetLakeFormation
      Handler: index.handler
      MemorySize: 128
      Timeout: 180
      Role: !GetAtt ResetLakeFormationRole.Arn
      Runtime: python3.7
      Code:
        ZipFile: !Sub |
          import boto3
          import json
          import urllib3

          http = urllib3.PoolManager()
          iam_resource = boto3.resource("iam")
          lakeformation_client = boto3.client("lakeformation")


          def send_response(event, context, status, reason, data):

              body = json.dumps({
                  "Status": status,
                  "Reason": reason,
                  "PhysicalResourceId": context.log_stream_name,
                  "StackId": event.get("StackId"),
                  "RequestId": event.get("RequestId"),
                  "LogicalResourceId": event.get("LogicalResourceId"),
                  "NoEcho": False,
                  "Data": data
              })

              http.request(
                  "PUT",
                  event.get("ResponseURL"),
                  body=body,
                  headers={
                      "Content-Type": "",
                      "Content-Length": str(len(body))
                  }
              )


          def delete_resources(name):

              role = iam_resource.Role(name=name)

              for role_policy in role.policies.all():
                  role_policy.delete()

              role.delete()

              boto3.client("lambda").delete_function(FunctionName=name)


          def handler(event, context):

              try:
                  # Only handle 'Create' requests.
                  if event.get("RequestType") == "Create":
                      lakeformation_client.put_data_lake_settings(
                          DataLakeSettings={
                              "DataLakeAdmins": [{
                                  "DataLakePrincipalIdentifier": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/ResetLakeFormation"
                              }]
                          }
                      )
                      lakeformation_client.grant_permissions(
                          Principal={"DataLakePrincipalIdentifier": "IAM_ALLOWED_PRINCIPALS"},
                          Resource={"Catalog": {}},
                          Permissions=["CREATE_DATABASE"]
                      )
                      lakeformation_client.put_data_lake_settings(
                          DataLakeSettings={
                              "DataLakeAdmins": [],
                              "CreateDatabaseDefaultPermissions": [
                                  {
                                      "Principal": {
                                          "DataLakePrincipalIdentifier": "IAM_ALLOWED_PRINCIPALS"
                                      },
                                      "Permissions": [
                                          "ALL"
                                      ]
                                  }
                              ],
                              "CreateTableDefaultPermissions": [
                                  {
                                      "Principal": {
                                          "DataLakePrincipalIdentifier": "IAM_ALLOWED_PRINCIPALS"
                                      },
                                      "Permissions": [
                                          "ALL"
                                      ]
                                  }
                              ],
                              "TrustedResourceOwners": []
                          }
                      )
                      send_response(event, context, "SUCCESS", "Lake Formation Reset", {})
                  else:
                      send_response(event, context, "SUCCESS", "No Action Performed", {})
              except lakeformation_client.exceptions.AccessDeniedException as exception:
                  # Sending a 'SUCCESS' response to allow the lab to continue deploying in 'AWS Labs' which does not support AWS Lake Formation.
                  send_response(event, context, "SUCCESS", f"Skipping Reset: {exception}", {})
              except Exception as exception:
                  send_response(event, context, "FAILED", str(exception), {})
              finally:
                  delete_resources(event.get("LogicalResourceId"))

  ResetLakeFormationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ResetLakeFormation
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: ResetLakeFormation
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - lakeformation:PutDataLakeSettings
                  - lakeformation:GrantPermissions
                  - iam:ListRoles
                Effect: Allow
                Resource:
                  - "*"
              - Action:
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:ListRolePolicies
                Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/ResetLakeFormation
              - Action:
                  - lambda:DeleteFunction
                Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:ResetLakeFormation
  LabVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: Lab VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref LabVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - !GetAZs
      Tags:
        - Key: Name
          Value: Public Subnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: PublicSubnet
    Properties:
      VpcId: !Ref LabVPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  pgwebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: pgweb Security Group
      GroupDescription: Enable access to pgweb
      VpcId: !Ref LabVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: pgweb Security Group

  pgwebServer:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    Properties:
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet
      ImageId: !Ref LinuxAmiId
      SecurityGroupIds:
        - !Ref pgwebSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y &&
          yum install -y docker &&
          service docker start &&
          docker run -d -p 80:8081 awsu/pgweb
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource pgwebServer --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: pgweb

  RedshiftRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Redshift-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - redshift.amazonaws.com
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - glue:BatchCreatePartition
                  - glue:BatchDeleteTableVersion
                  - glue:BatchGetCrawlers
                  - glue:BatchGetDevEndpoints
                  - glue:BatchGetJobs
                  - glue:BatchGetPartition
                  - glue:BatchGetTriggers
                  - glue:BatchGetWorkflows
                  - glue:CreateDatabase
                  - glue:CreateTable
                  - glue:DeleteTableVersion
                  - glue:Get*
                  - glue:List*
                  - glue:SearchTables
                  - s3:*
                Effect: Allow
                Resource: "*"

  RedshiftSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - RedshiftRole
    Properties:
      GroupName: Redshift Security Group
      GroupDescription: Enable access to redshift
      VpcId: !Ref LabVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5439
          ToPort: 5439
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Redshift Security Group

  RedshiftClusterSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Properties:
      Description: Cluster subnet group for Amazon Redshift
      SubnetIds:
        - !Ref PublicSubnet

  RedshiftCluster:
    Type: AWS::Redshift::Cluster
    Properties:
      ClusterType: single-node
      NodeType: dc2.large
      MasterUsername: admin
      MasterUserPassword: Redshift123
      IamRoles:
        - !GetAtt RedshiftRole.Arn
      VpcSecurityGroupIds:
        - !Ref RedshiftSG
      ClusterSubnetGroupName: !Ref RedshiftClusterSubnetGroup
      PubliclyAccessible: true
      Port: 5439
      DBName: lab

  ReadOnlyGroup:
    Type: AWS::IAM::Group
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess

  GroupAssignment:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref ReadOnlyGroup
      Users:
        - awsstudent

Outputs:
  Region:
    Value: !Ref AWS::Region
    Description: Lab Region

  RedshiftEndpoint:
    Value: !GetAtt RedshiftCluster.Endpoint.Address
    Description: Redshift Endpoint

  RedshiftRole:
    Value: !GetAtt RedshiftRole.Arn
    Description: Redshift Role ARN

  pgweb:
    Value: !GetAtt pgwebServer.PublicIp
    Description: pgwebIPAddress